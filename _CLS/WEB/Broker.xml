<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WEB.Broker">
<Super>%CSP.REST</Super>
<TimeCreated>63417,53011.909769</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
		<!-- перенести в другой брокер
		getTransactions
		-->
		<Route Url="/result/"						Method="POST"		Call="REST.JSON:RobokassaResult"/>
		<Route Url="/success/"						Method="POST"		Call="REST.JSON:RobokassaSuccess"/>
		<Route Url="/fail/url/"						Method="POST"		Call="REST.JSON:RobokassaFailUrl"/>
		<!-- перенести в другой брокер-->
	   <Route Url="/test/" 							Method="POST" 		Call="WEB.UserBroker:Test"/>
	   <Route Url="/news/Get/:ID"		   			Method="GET" 		Call="WEB.UserBroker:NewMethod2"/>
	   <Route Url="/getTransactions/"				Method="GET"		Call="SPD.Logic.Dancer:getTransactions1"/>
	   
	   <Route Url="/Reg/"							Method="POST"		Call="Auth.Logic.Auth:RegNewDancer"/>
	   
	   
	   <Route Url="/Login/"							Method="POST" 		Call="Auth.Session:CreateSessionForm"/>
	   <Route Url="/Logout/"						Method="POST" 		Call="Auth.Session:ClearSession"/>
	   
	   
	   <Route Url="/upload/"						Method="POST" 		Call="LIB.Logic.Image:FileUpload"/>
	   
	   
	   <Route Url="/GetSchools/"					Method="GET" 		Call="SPD.Logic.School:GetSchools"/>
	   <Route Url="/GetSchool/:ID"					Method="GET" 		Call="SPD.Logic.School:GetSchool"/>
	   
	   
	   <Route Url="/GetAddress/:ID"					Method="GET" 		Call="LIB.Logic.Address:GetAddress"/>
	   
	   
	   <Route Url="/GetRoom/:ID"					Method="GET" 		Call="LIB.Logic.Room:GetRoom"/>
	   <Route Url="/GetAddressByRoom/:ID" 			Method="GET"		Call="SPD.Logic.Room:GetAddressByRoom"/>
	   
	   	   
	   <Route Url="/InviteAccept/:hash"				Method="POST" 		Call="SPD.Logic.School:InviteAccept"/>
	   <Route Url="/InviteReject/:hash"				Method="POST" 		Call="SPD.Logic.School:InviteReject"/>
	   <Route Url="/ActualGetPrice/:ID"				Method="GET"		Call="SPD.Logic.School:ActualGetPrice"/>
	   <Route Url="/CreateNewInstructor/"			Method="POST" 		Call="SPD.Logic.School:CreateNewInstructor"/>
	   <Route Url="/GetLessonTypes/:ID"				Method="GET"		Call="SPD.Logic.School:GetLessonTypes"/>
	   <Route Url="/GetLessonsFromTable/:ID"		Method="GET"		Call="SPD.Logic.TimeTableLessons:GetLessonsFromTable"/>
	   
	   <Route Url="/GetAllRoomsForSchool/:ID"		Method="GET" 		Call="SPD.Logic.Room:GetAllRoomsForSchool"/>
	   
	   <Route Url="/GetInstructorList/:ID"			Method="GET" 		Call="SPD.Logic.Instructor:GetInstructorList"/>
	   <Route Url="/GetInstructorList/"				Method="GET" 		Call="SPD.Logic.Instructor:GetAllInstructorList"/>
	   <Route Url="/GetTrainerInfo/:ID"				Method="GET"		Call="SPD.Logic.Instructor:GetTrainerInfo"/>
	   <Route Url="/GetSchoolByTrainerId/:ID"		Method="GET"		Call="SPD.Logic.Instructor:GetSchoolByTrainerId"/>
	   
	   
	   <Route Url="/GetLesson/:ID"					Method="GET"		Call="SPD.Logic.TimeTableLessons:GetLesson"/>
	   
	   
	   <Route Url="/GetJournalLessons/:ID"			Method="GET"		Call="SPD.Logic.JournalLesson:GetJournalLessons"/>
	   <Route Url="/GetJournallLesson/:ID"			Method="GET"		Call="SPD.Logic.JournalLesson:GetJournalLesson"/>
	   
	   <Route Url="/Subscribe/:ID"					Method="POST"		Call="SPD.Logic.Dancer:SubscribeJL"/>
	   <Route Url="/GetCurrentBalance/"				Method="GET"		Call="SPD.Logic.Dancer:GetCurrentBalance"/>
		<Route Url="/GetMyLessons/"					Method="POST"		Call="SPD.Logic.Dancer:GetMyLessons"/>
	   
		<Route Url="/InitPayment/"					Method="POST"		Call="REST.JSON:InitPayment"/>
	   
		<!--Subscription-->
		<Route Url="/GetSubscription/:ID"			Method="GET"		Call="SPD.Logic.SubscriptionList:Get"/>
		<Route Url="/GetSubscriptions/:IdSchool"	Method="GET"		Call="SPD.Logic.SubscriptionList:GetAll"/>
		<Route Url="/GetLessFromSubscription/:ID"	Method="GET"		Call="SPD.Logic.LessonInSubscription:GetLessFromSubscription"/>
		<Route Url="/GetSubscriptionFromList/:ID"	Method="GET"		Call="SPD.Logic.SubscriptionList:GetSubscriptionFromList"/>
		<!--Subscription-->
	   
</Routes>
]]></Data>
</XData>

<Method name="DispatchRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*
	//W !,"jhgujyfkfyvh",pUrl,pMethod,!
	//w %request.GetCgiEnv("HTTP_USER_AGENT")
	///проверка сессии.
	w 1
	try{
	$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
		set hash=obj.hash
		set userID=obj.UserID
		///проверка всех сессий на время жизни
		&sql(declare s1 cursor for select id,DateTime into:id,:DateTime from Auth.SessionData)
		&sql(open s1)
		for {
			&sql(fetch s1)
			quit:(SQLCODE '= 0)
			if (##class(Auth.Session).DateDiff("second",$zdt($h,3),DateTime)<0)
			{
				do ##class(Auth.SessionData).%DeleteId(id)
				
			}
		}
		&sql(close s1)
		
		if ('##class(Auth.Session).CheckSession(userID,hash))
		{
			///подмена кук. Либо сменился браузер, ip
			w "{""children"":{"_
			"""success"":"""_1_
			""",""hash"":"""_""_
			""",""userId"":"""_""_
			""",""SurName"":"""_""_
			""",""LastName"":"""_""_
			""",""FirstName"":"""_""_
			"""}}"
		}
		
		
	}
	catch ex{
		
	}*/
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit
             
            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                
                #; Dispatch
                Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                If $$$ISERR(tSC) Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="Http404">
<Description>
Dispatch a REST request according to URL and Method
Issue an '404' error ( user can override)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w "Мимо"
    Set %response.Status="404 Not Found"
    Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
