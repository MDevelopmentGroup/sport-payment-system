<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="SPD.Price">
<Super>%Persistent</Super>
<TimeCreated>63393,57121.285694</TimeCreated>

<Property name="Cost">
<Type>SPD.Balance</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property DateActualStart As %DateTime;

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Property DateActualEnd As %DateTime;

]]></Content>
</UDLText>

<Property name="Semester">
<Type>SPD.Semester</Type>
<Cardinality>one</Cardinality>
<Inverse>LessonCost</Inverse>
<Relationship>1</Relationship>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property school As SPD.School;

]]></Content>
</UDLText>

<Property name="LessonType">
<Type>SPD.TypeLesson</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property Actual As %Boolean [ Calculated, SqlComputeCode = {set {Actual}=##class(SPD.Price).SetActual({DateActualEnd})}, SqlComputed ];

]]></Content>
</UDLText>

<Method name="SetActual">
<ClassMethod>1</ClassMethod>
<FormalSpec>DateActualEnd</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set bl=1
	//w "now="_$zdt($h,3),!
	//w "DateActualEnd="_DateActualEnd,!
	set nowdate=$list($listfromstring($h,","),1)
	set nowtime=$list($listfromstring($h,","),2)

	set actdate=$list($listfromstring($zdatetimeh(DateActualEnd,3),","),1)
	set acttime=$list($listfromstring($zdatetimeh(DateActualEnd,3),","),2)
	//w "nowdate="_nowdate_"     nowtime="_nowtime,!
	//w "actdate="_actdate_"     acttime="_acttime,!
	if (nowdate>actdate)
	{
		set bl=0
	}
	elseif ((nowtime>acttime)&(nowdate>actdate) )
	{
		set bl=0
	}
	ret bl
]]></Implementation>
</Method>

<Method name="Create">
<ClassMethod>1</ClassMethod>
<FormalSpec>IdLesson,cost,IdSemester</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try
	{
		set sem=##class(SPD.Semester).%OpenId(IdSemester)
		set typelesson=##class(SPD.TypeLesson).%OpenId(IdLesson)
		set price=##class(SPD.Price).%New()
		set price.Cost=##class(REST.JSON).SetSum(cost)
		set price.Semester=sem
		set price.TimeTableLesson=ttl
		set st=price.%Save()
	}
	catch er
	{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="Remove">
<ClassMethod>1</ClassMethod>
<FormalSpec>IdPrice</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		
	}
	catch ex{
		
	}
	ret st
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SPD.PriceD</DataLocation>
<DefaultData>PriceDefaultData</DefaultData>
<IdLocation>^SPD.PriceD</IdLocation>
<IndexLocation>^SPD.PriceI</IndexLocation>
<StreamLocation>^SPD.PriceS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PriceDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TypeLesson</Value>
</Value>
<Value name="3">
<Value>Cost</Value>
</Value>
<Value name="4">
<Value>DateActualStart</Value>
</Value>
<Value name="5">
<Value>DateActualEnd</Value>
</Value>
<Value name="6">
<Value>Semester</Value>
</Value>
<Value name="7">
<Value>school</Value>
</Value>
<Value name="8">
<Value>Actual</Value>
</Value>
<Value name="9">
<Value>MatchTypeLess</Value>
</Value>
<Value name="10">
<Value>SubscriptionList</Value>
</Value>
<Value name="11">
<Value>TimeTableLesson</Value>
</Value>
<Value name="12">
<Value>LessonType</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
