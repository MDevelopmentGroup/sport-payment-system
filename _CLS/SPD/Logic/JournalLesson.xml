<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="SPD.Logic.JournalLesson">
<TimeCreated>63425,69359.8237</TimeCreated>

<Method name="CreateJL">
<ClassMethod>1</ClassMethod>
<FormalSpec>idlessontable,idschool,idinstructor,dtbegin,dtend,idsem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		
		set lft=##class(SPD.TimeTableLessons).%OpenId(idlessontable)
		set journalllesson=##class(SPD.JournalLesson).%New()
		set journalllesson.DateBegin=$zdt(dtbegin,3)					
		set journalllesson.DateEnd=$zdt(dtend,3)
		set journalllesson.Instructor=lft.Instructor
		set journalllesson.LessonInTable=lft
		set journalllesson.RoomDance=lft.Room
		set journalllesson.Semestr=##class(SPD.Semester).%OpenId(idsem)
		set journalllesson.School=##class(SPD.School).%OpenId(idschool)	
		set st=journalllesson.%Save()
	}
	catch er{
		set st=er.AsStatus()
	}
	zw st
	ret st
]]></Implementation>
</Method>

<Method name="GetBeginDate">
<ClassMethod>1</ClassMethod>
<FormalSpec>idlessontable,semid</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set str=""
	
	
	
	ret str
]]></Implementation>
</Method>

<Method name="GenerateJournalLesson">
<ClassMethod>1</ClassMethod>
<FormalSpec>idlessontable</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set lft=##class(SPD.TimeTableLessons).%OpenId(idlessontable)
		set school=##class(Auth.Session).GetCurrentSchool()
		set schoolid=school.%Id()
		set DateActualEnd=##class(SPD.Semester).GetBeginSemester(schoolid)
		//set DateActualEnd=##class(SPD.Logic.JournalLesson).GetLastActualPrice(lft.TypeLesson.%Id())
		set dattme=$zdt($H,3)
		//set school=##class(Auth.Session).GetCurrentSchool()
		///todo
		set datebeg=$list($listfromstring($h,","),1)
		w "datebeg="_datebeg,!
		set ^Days("Sut")=0 set ^Days("Mon")=1 set ^Days("Tue")=2 set ^Days("Wed")=3 set ^Days("Thu")=4 set ^Days("Fri")=5 set ^Days("Sat")=6
		set GetDay=($list($listfromstring($zdt($h,11)," "),1))
		set addorefday=0
		//w "^Days(GetDay)="_^Days(GetDay),!
		//w "lft.Day="_lft.Day,!
		if ((lft.Day-^Days(GetDay))>-1)
		{
			set addorefday=lft.Day-^Days(GetDay)
		}
		else{
			set addorefday=7+(lft.Day-^Days(GetDay))
		}
		w "addorefday="_addorefday,!
		set datebeg=datebeg+addorefday
		set idlessontype=lft.TypeLesson.%Id()
		&sql(declare sPrice cursor for
		select id into :idSem from SPD.Semester where DateEnd>:dattme and School->id=:schoolid and Actual=1)
		&sql(open sPrice)
		for {
			//w "-------------------------------------------",!
			&sql(fetch sPrice)
			quit:(SQLCODE '= 0)
			
			set semestr=##class(SPD.Semester).%OpenId(idSem)
			set DateActualEnd=semestr.DateEnd
			
			//w "DateActualEnd="_DateActualEnd,!
			//w "($zdatetimeh(DateActualEnd,3,1)="_($zdatetimeh(DateActualEnd,3,1)),!
			//w "$zdateh($zdate($h)="_$zdateh($zdate($h)),!
			w "DateActualEnd="_DateActualEnd,!
			set count=($zdatetimeh(DateActualEnd,3,1)-datebeg)/7
			w "datebeg="_datebeg,!
			w "DateEnd="_$zdatetimeh(DateActualEnd,3,1),!
			//w count,!
			
			//w "($zdatetimeh(DateActualEnd,3,1)-datebeg)/7="_count,!
			set timebeg=lft.TimeBegin
			set TimeActualEnd=$list($listfromstring($zdatetimeh(DateActualEnd,3,1),","),2)
			set timeend=lft.TimeEnd
			set dateend=datebeg
			if (count>=1){
				for i=0:1:count{
					set st=##class(SPD.Logic.JournalLesson).CreateJL(idlessontable, school.%Id(), 
					lft.Instructor.%Id(), ((datebeg)_","_timebeg), ((dateend)_","_timeend), idSem)
					w $zdt((datebeg)_","_timebeg,3),!
					w $zdt((dateend)_","_timeend,3),!
					set datebeg=datebeg+7
					set dateend=dateend+7
					//
				}
			}
			elseif (TimeActualEnd<$list($listfromstring($h,","),2)){
									
					w $zdt((datebeg)_","_timebeg,3),!
					w $zdt((dateend)_","_timeend,3),!
					//set journalllesson.DateBegin=$zdt((datebeg)_","_timebeg,3)
					//set journalllesson.DateEnd=$zdt((dateend)_","_timeend,3)
					set st=##class(SPD.Logic.JournalLesson).CreateJL(idlessontable, school.%Id(), 
					lft.Instructor.%Id(), ((datebeg)_","_timebeg), ((dateend)_","_timeend), idSem)
					
					set datebeg=datebeg+7
					set dateend=dateend+7
			}
		}
		&sql(close sPrice)
	}
	catch ex{
		set st=ex.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="UpdateJournalLesson">
<ClassMethod>1</ClassMethod>
<FormalSpec>idlessontable</FormalSpec>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		
		set lft=##class(SPD.TimeTableLessons).%OpenId(idlessontable)
		set DateActualEnd=##class(SPD.Semester).GetBeginSemester(schoolid)
		set dattme=$zdt($H,3)
		//set school=##class(Auth.Session).GetCurrentSchool()
		///todo
		set school=##class(SPD.School).%OpenId(lft.School.%Id())
		set schoolid=school.%Id()
		set idlessontype=lft.TypeLesson.%Id()
		
		&sql(declare JL cursor for select id into :idJournalLesson from SPD.JournalLesson where LessonInTable->id=:idlessontable and Semestr->Actual=1)
		&sql(open JL)
		for {
			&sql(fetch JL)
			quit:(SQLCODE '= 0)
			set jl=##class(SPD.JournalLesson).%OpenId(idJournalLesson)
			
			set datebegin=7
		}
		&sql(close JL)
	}
	catch ex{
		set st=ex.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetJournalLessons">
<ClassMethod>1</ClassMethod>
<FormalSpec>ID</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set school=##class(SPD.School).%OpenId(ID)
		//&sql(select )
		set sqlquery="select "_
		"ID, DateBegin, DateEnd, "_
		"Instructor->id As InstructorId, Show as Show,"_
		"Instructor->IdDancer->FirstName As IFirstName, Instructor->IdDancer->LastName As ILastName, Instructor->IdDancer->Patronymic As IPatrnymic, "_
		"LessonInTable->id as LessonInTableId, RoomDance->id As RoomId, RoomDance->Name as RoomName, "_ 
		"LessonInTable->ShortDescription As LessonDescr, LessonInTable->TypeLesson->id As TypeLessonId, "_
		"School->id as SchoolId, School->Name As SchoolName, countDancer "_
		"FROM SPD.JournalLesson where School->id="_ID
		
		do ##class(SPD.School).GetJSONData(sqlquery)
	}
	catch ex{
		set st=ex.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="MakeTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>t1,t2,*date</FormalSpec>
<ReturnType>%Time</ReturnType>
<Implementation><![CDATA[
	set t=""
	if ((t1+t2)>86399)
	{
		set date=date+1
		set t=(t2+t1)-86399
		
	}
	ret t
]]></Implementation>
</Method>

<Method name="JSONGetLastActualPrice">
<ClassMethod>1</ClassMethod>
<FormalSpec>IDTypeLseeon</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set dt=##class(SPD.Logic.JournalLesson).GetLastActualPrice(IDTypeLseeon)
		w "{""children"":"""_dt_"""}"
	}
	catch ex{
		set st=ex.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod GetLastActualPrice(IDTypeLesson) As %String
{
		///todo
		/*
		&sql(declare price cursor for select TypeLesson->id as id,DateActualEnd,Actual into :id,:DateActualEnd,:Actual from SPD.Price order by DateActualEnd desc)
		&sql(open price)
		for {
			&sql(fetch price)
			if (id=IDTypeLseeon) && (Actual=1){
				quit
			}
			quit:(SQLCODE '= 0)
		}
		&sql(close price)
		
		&sql(SELECT 
		Price->DateActualEnd into :DateActualEnd
		FROM SPD.MatchPriceTypeLess
		where TypeLesson->id=:IDTypeLesson
		order by Price->DateActualEnd desc)
	ret DateActualEnd
}
*/
]]></Content>
</UDLText>

<Method name="GetJournalLesson">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set sqlquery="select "_
		"ID, DateBegin, DateEnd, Instructor->id as InstructorID, "_
		"LessonInTable->id as LessonInTableId, LessonInTable->ShortDescription as ShortDescription, LessonInTable->TypeLesson->id as TypeLessonId, "_
		"RoomDance->id as RoomId, "_
		"Price->id as PriceId, Price->Cost as Cost, School->Name as SchoolName, School->id as SchoolID, countDancer "_
		"FROM SPD.JournalLesson "_
		"where id="_id
		do ##class(SPD.School).GetJSONData(sqlquery)
	}
	catch er{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set st=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
		zw obj
		set journalllesson=##class(SPD.JournalLesson).%OpenId(obj.ID)
		if (obj.DateBegin'="" && obj.TimeBegin'=""){
			set journalllesson.DateBegin=$zdt($zdth(obj.DateBegin_" "_obj.TimeBegin,4),3)
		}
		if (obj.TimeEnd'="")
		{
			if ($zth(obj.TimeBegin)>$zth(obj.TimeEnd))
			{
				set dateend=$zdateh(obj.DateBegin,5)+1
			}
			else 
			{
				set dateend=$zdateh(obj.DateBegin,4)
			}
			
			set journalllesson.DateEnd=$zdt(dateend_","_$zth(obj.TimeEnd),3)
		}
		
		if (obj.InstructorID'=""){
			set journalllesson.Instructor=##class(SPD.Instructor).%OpenId(obj.InstructorID)
		}
		if (obj.LessonInTableId'=""){
			set journalllesson.LessonInTable=##class(SPD.TimeTableLessons).%OpenId(obj.LessonInTableId)}
		
		if (obj.RoomId'=""){
			set journalllesson.RoomDance=##class(SPD.Room).%OpenId(obj.RoomId)	}
		if (obj.Show'=""){
			w "obj.Show="_obj.Show,!
			set journalllesson.Show=$zconvert(obj.Show,"I","UTF8")}
		set st=journalllesson.%Save()
	}
	catch err{
		set st=err.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="UpdateJournallLessons">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		
		set st=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
		
		for i=1:1:obj.Size
		{			
			set proxy=obj.Oref(i)
			set journalllesson=##class(SPD.JournalLesson).%OpenId(proxy.ID)
			if (proxy.DateBegin'="" ){
				set journalllesson.DateBegin=$zdt($zdth(proxy.DateBegin,3),3)
			}
			w journalllesson.DateBegin,!
			if (proxy.DateEnd'="")
			{set journalllesson.DateEnd=$zdt($zdth(proxy.DateEnd,3),3)}
			
			if (proxy.InstructorID'=""){
				set journalllesson.Instructor=##class(SPD.Instructor).%OpenId(proxy.InstructorID)
			}
			if (proxy.LessonInTableId'=""){
				set journalllesson.LessonInTable=##class(SPD.TimeTableLessons).%OpenId(proxy.LessonInTableId)}
			
			if (proxy.RoomId'=""){
				set journalllesson.RoomDance=##class(SPD.Room).%OpenId(proxy.RoomId)	
			}
			set st=journalllesson.%Save()
			if (proxy.Show'=""){
				set journalllesson.Show=##class(SPD.Room).%OpenId(proxy.Show)
				set st=journalllesson.%Save()
			}
		}
	}
	catch er{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&sql(select count(UserSubscription) into :count
	FROM SPD.TempGroup where 
	UserSubscription->id=:id)
	ret count
]]></Implementation>
</Method>

<Method name="CheckJL">
<ClassMethod>1</ClassMethod>
<FormalSpec>sole</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try 
	{
		&sql(select id into :id from SPD.Subscription where Sole=:sole)
		set sub=##class(SPD.Subscription).%OpenId(id)
		
	}
	catch er{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetNextJournalLessons">
<ClassMethod>1</ClassMethod>
<FormalSpec>id,lt</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try
	{
		set str=""
		set stdatet=$zdt($h,3)
		set eddatet=$zdt($h+lt,3)
		set eddatet=eddatet_" 00:00:00"
		//w stdatet,!
		//w eddatet,!
		&sql(
		declare ref cursor for
		select ID, CompleteGroup, DateBegin, DateEnd, 
		
		Instructor->IdDancer->FirstName ,Instructor->IdDancer->LastName,
		 Instructor->IdDancer->Patronymic,Instructor->id,
		 
		 LessonInTable, 
		 
		RoomDance->Address->City, RoomDance->Address->Country, RoomDance->Address->Street,
		RoomDance->Address->Building,RoomDance->Address->RoomNumber,
		School, Semestr, countDancer, 
		LessonInTable->TypeLesson->id 
		into 
		:idJL, :CompleteGroup, :DateBegin, :DateEnd, 
		:InstructorName,:InstructorLast, 
		:InstructorPat,:InstructorID,
		:LessonInTableID,
		
		:City, :Country,:Street,
		:Building,:RoomNumber,
		
		:SchoolID, :SemestrID, :countDancer
		,:idtypelesson
		from SPD.JournalLesson 
		where DateBegin>:stdatet and DateBegin<:eddatet and School->id=:id
		)
		
		&sql(open ref)
		for {
		&sql(fetch ref)
				quit:(SQLCODE '=0)
				&sql(select cost into :cost from SPD.Price where LessonType->id=:idtypelesson and Semester->id=:SemestrID)
				set str=str_"{""idJL"":"""_idJL_""","_
				"""CompleteGroup"":"""_CompleteGroup_""","_
				"""DateBegin"":"""_DateBegin_""","_
				"""DateEnd"":"""_DateEnd_""","_
				"""InstructorName"":"""_InstructorName_""","_
				"""InstructorLast"":"""_InstructorLast_""","_
				"""InstructorPat"":"""_InstructorPat_""","_
				"""InstructorID"":"""_InstructorID_""","_
				"""LessonInTableID"":"""_LessonInTableID_""","_
				"""City"":"""_City_""","_
				"""Country"":"""_Country_""","_
				"""Street"":"""_Street_""","_
				"""Building"":"""_Building_""","_
				"""RoomNumber"":"""_RoomNumber_""","_				
				"""SchoolID"":"""_SchoolID_""","_
				"""SemestrID"":"""_SemestrID_""","_
				"""cost"":"""_cost_""","_
				"""countDancer"":"""_countDancer_"""},"
		}
		if ($LENGTH(str)>3){
			set str=$extract(str,1,$LENGTH(str)-1)
		}
		set str="{""children"":["_str
		set str=str_"]}"
		w str
		&sql(close ref)
		
	}
	catch er
	{
		set st=er.AsStatus()
	}
	
	ret st
]]></Implementation>
</Method>

<Method name="GetNextJournalLessons1">
<ClassMethod>1</ClassMethod>
<FormalSpec>id,lt</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d %response.SetHeader("Access-Control-Allow-Origin","*") 
	d %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS") 
	d %response.SetHeader("Access-Control-Max-Age","1000") 
	d %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization, X-Requested-With")
	set st=$$$OK
	try
	{
		set str=""
		set stdatet=$zdt($h,3)
		set eddatet=$zdt($h+lt,3)
		set eddatet=eddatet_" 00:00:00"
		//w stdatet,!
		//w eddatet,!
		&sql(
		declare ref2 cursor for
		select ID, CompleteGroup, DateBegin, DateEnd, 
		
		Instructor->IdDancer->FirstName ,Instructor->IdDancer->LastName,
		 Instructor->IdDancer->Patronymic,Instructor->id,
		 
		 LessonInTable, 
		 
		RoomDance->Address->City, RoomDance->Address->Country, RoomDance->Address->Street,
		RoomDance->Address->Building,RoomDance->Address->RoomNumber,
		School, Semestr, countDancer, 
		LessonInTable->TypeLesson->id 
		into 
		:idJL, :CompleteGroup, :DateBegin, :DateEnd, 
		:InstructorName,:InstructorLast, 
		:InstructorPat,:InstructorID,
		:LessonInTableID,
		
		:City, :Country,:Street,
		:Building,:RoomNumber,
		
		:SchoolID, :SemestrID, :countDancer
		,:idtypelesson
		from SPD.JournalLesson 
		where DateBegin>:stdatet and DateBegin<:eddatet and School->id=:id and Show=1
		order by DateBegin
		)
		set json=##class(%ZEN.proxyObject).%New()
		set json.children=##class(%ListOfDataTypes).%New()
		
		&sql(open ref2)
		for {
		&sql(fetch ref2)
				quit:(SQLCODE '=0)
				&sql(select cost into :cost from SPD.Price where LessonType->id=:idtypelesson and Semester->id=:SemestrID)				
				set jsonresp=##class(%ZEN.proxyObject).%New()
				set InsProxyObj=##class(%ZEN.proxyObject).%New()
				set jsonresp.CompleteGroup=CompleteGroup
				set jsonresp.idJL=idJL
				set jsonresp.DateBegin=DateBegin
				set jsonresp.DateEnd=DateEnd
				set InsProxyObj.InstructorID=InstructorID
				set InsProxyObj.InstructorName=InstructorName
				set InsProxyObj.InstructorLast=InstructorLast
				set InsProxyObj.InstructorPat=InstructorPat
				set jsonresp.Instructor=InsProxyObj				
				set jsonresp.LessonInTableID=LessonInTableID
				set jsonresp.City=City
				set jsonresp.Country=Country
				set jsonresp.Street=Street
				set jsonresp.Building=Building
				set jsonresp.RoomNumber=RoomNumber
				set jsonresp.SchoolID=SchoolID
				set jsonresp.SemestrID=SemestrID
				set jsonresp.cost=cost
				set jsonresp.countDancer=countDancer
				set st=json.children.Insert(jsonresp)
				/*set str=str_"{""idJL"":"""_idJL_""","_
				"""CompleteGroup"":"""_CompleteGroup_""","_
				"""DateBegin"":"""_DateBegin_""","_
				"""DateEnd"":"""_DateEnd_""","_
				"""InstructorName"":"""_InstructorName_""","_
				"""InstructorLast"":"""_InstructorLast_""","_
				"""InstructorPat"":"""_InstructorPat_""","_
				"""InstructorID"":"""_InstructorID_""","_
				"""LessonInTableID"":"""_LessonInTableID_""","_
				"""City"":"""_City_""","_
				"""Country"":"""_Country_""","_
				"""Street"":"""_Street_""","_
				"""Building"":"""_Building_""","_
				"""RoomNumber"":"""_RoomNumber_""","_				
				"""SchoolID"":"""_SchoolID_""","_
				"""SemestrID"":"""_SemestrID_""","_
				"""cost"":"""_cost_""","_
				"""countDancer"":"""_countDancer_"""},"*/
		}
		/*
		if ($LENGTH(str)>3){
			set str=$extract(str,1,$LENGTH(str)-1)
		}
		set str="{""children"":["_str
		set str=str_"]}"
		w str*/
		
		&sql(close ref2)
		
		do json.%ToJSON()
	}
	catch er
	{
		set st=er.AsStatus()
	}
	
	ret st
]]></Implementation>
</Method>

<Method name="GenerateJLByTS">
<ClassMethod>1</ClassMethod>
<FormalSpec>Idlessonintable,starttime,endtime</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try
	{
		set ^Days("Sut")=0 set ^Days("Mon")=1 set ^Days("Tue")=2 set ^Days("Wed")=3 set ^Days("Thu")=4 set ^Days("Fri")=5 set ^Days("Sat")=6
		set bdate=$zdth(starttime,3)
		set day=^Days($list($listfromstring($zdt(bdate,11)," "),1))
		//w "day="_$list($listfromstring($zdt(bdate,11)," "),1),!
		set edate=$zdth(endtime,3)
		set enddate=edate+0
		//w "sub "_(edate-bdate),!
		set count=(edate-bdate)/7
		
		set lft=##class(SPD.TimeTableLessons).%OpenId(Idlessonintable)
		if ((lft.Day-day)>-1)
		{
			set addorefday=lft.Day-day
		}
		else{
			set addorefday=7+(lft.Day-day)
		}
		//w "count="_count,!
			//w "bdate="_$zdt(bdate,3),!
			//w "edate="_$zdt(edate,3),!
			//w count,!
			set TimeActualEnd=$list($listfromstring(edate,","),2)
			set TimeBegin=$list($listfromstring(bdate,","),2)
			//w "($zdatetimeh(DateActualEnd,3,1)-datebeg)/7="_count,!
			set timebeg=lft.TimeBegin
			set timeend=lft.TimeEnd
			set datebeg=bdate+addorefday
			//w "datebeg="_datebeg,!
			set dateend=datebeg
			if (count>=1){
				set i=0
				while ((i<count)&&(i<20)){
					set st=##class(SPD.Logic.JournalLesson).CreateJL(idlessontable, school.%Id(),
					lft.Instructor.%Id(), ((datebeg)_","_timebeg), ((dateend)_","_timeend), idSem)
					//w $zdt((datebeg)_","_timebeg,3)_" for",!
					//w $zdt((dateend)_","_timeend,3)_" for",!
					set datebeg=datebeg+7
					set dateend=dateend+7
					//w "datebeg+7="_datebeg,!
					//w "enddate="_enddate,!
					set i=i+1
					//
				}
			}
			//elseif (TimeActualEnd<$list($listfromstring($h,","),2)){
			
			if ((datebeg+0)<(enddate+0)){
					//w $zdt((datebeg)_","_timebeg,3)_" <",!
					//w $zdt((dateend)_","_timeend,3)_" <",!
					//set journalllesson.DateBegin=$zdt((datebeg)_","_timebeg,3)
					//set journalllesson.DateEnd=$zdt((dateend)_","_timeend,3)
					set st=##class(SPD.Logic.JournalLesson).CreateJL(idlessontable, school.%Id(), 
					lft.Instructor.%Id(), ((datebeg)_","_timebeg), ((dateend)_","_timeend), idSem)
					set datebeg=datebeg+7
					set dateend=dateend+7
			}
			elseif ((datebeg+0)=(enddate+0)){
				//w "==",!
				//w "TimeActualEnd="_TimeActualEnd,!
				//w "Timebeg="_timebeg,!
				if (TimeActualEnd>timebeg)
				{
					//w $zdt((datebeg)_","_timebeg,3)_" =",!
					//w $zdt((dateend)_","_timeend,3)_" =",!
					set st=##class(SPD.Logic.JournalLesson).CreateJL(idlessontable, school.%Id(), 
					lft.Instructor.%Id(), ((datebeg)_","_timebeg), ((dateend)_","_timeend), idSem)
				}
			}
	}
	catch er{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>
</Class>
</Export>
