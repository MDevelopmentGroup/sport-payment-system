<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="SPD.Logic.JournalLesson">
<TimeCreated>63425,69359.8237</TimeCreated>

<Method name="GenerateJournalLesson">
<ClassMethod>1</ClassMethod>
<FormalSpec>idlessontable</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		
		set lft=##class(SPD.TimeTableLessons).%OpenId(idlessontable)
		set school=##class(SPD.School).%OpenId(lft.School.%Id())
		set schoolid=school.%Id()
		set DateActualEnd=##class(SPD.Semester).GetBeginSemester(schoolid)
		//set DateActualEnd=##class(SPD.Logic.JournalLesson).GetLastActualPrice(lft.TypeLesson.%Id())
		set dattme=$zdt($H,3)
		//set school=##class(Auth.Session).GetCurrentSchool()
		///todo
		
		
		set datebeg=$list($listfromstring($h,","),1)
		w "datebeg="_datebeg,!
		set ^Days("Sut")=0 set ^Days("Mon")=1 set ^Days("Tue")=2 set ^Days("Wed")=3 set ^Days("Thu")=4 set ^Days("Fri")=5 set ^Days("Sat")=6
		set GetDay=($list($listfromstring($zdt($h,11)," "),1))
		set addorefday=0
		//w "^Days(GetDay)="_^Days(GetDay),!
		//w "lft.Day="_lft.Day,!
		if ((lft.Day-^Days(GetDay))>-1)
		{
			set addorefday=lft.Day-^Days(GetDay)
		}
		else{
			set addorefday=7+(lft.Day-^Days(GetDay))
		}
		
		w "addorefday="_addorefday,!
		set datebeg=datebeg+addorefday
		set idlessontype=lft.TypeLesson.%Id()
		
		&sql(declare sPrice cursor for
		select id into :idSem from SPD.Semester where DateEnd>:dattme and School->id=:schoolid and Actual=1)
		&sql(open sPrice)
		for {
			//w "-------------------------------------------",!
			&sql(fetch sPrice)
			quit:(SQLCODE '= 0)
			
			set semestr=##class(SPD.Semester).%OpenId(idSem)
			set DateActualEnd=semestr.DateEnd
			
			//w "DateActualEnd="_DateActualEnd,!
			//w "($zdatetimeh(DateActualEnd,3,1)="_($zdatetimeh(DateActualEnd,3,1)),!
			//w "$zdateh($zdate($h)="_$zdateh($zdate($h)),!
			w "DateActualEnd="_DateActualEnd,!
			set count=($zdatetimeh(DateActualEnd,3,1)-datebeg)/7
			w "datebeg="_datebeg,!
			w "DateEnd="_$zdatetimeh(DateActualEnd,3,1),!
			//w count,!
			
			//w "($zdatetimeh(DateActualEnd,3,1)-datebeg)/7="_count,!
			set timebeg=lft.TimeBegin
			set TimeActualEnd=$list($listfromstring($zdatetimeh(DateActualEnd,3,1),","),2)
			set timeend=lft.TimeEnd
			set dateend=datebeg
			if (count>=1){
				for i=0:1:count{
					set journalllesson=##class(SPD.JournalLesson).%New()					
					w $zdt((datebeg)_","_timebeg,3),!
					w $zdt((dateend)_","_timeend,3),!
					
					set journalllesson.DateBegin=$zdt((datebeg)_","_timebeg,3)
					
					set journalllesson.DateEnd=$zdt((dateend)_","_timeend,3)
					
					set journalllesson.Instructor=lft.Instructor
					
					set journalllesson.Semestr=semestr
					
					set journalllesson.School=school
					set journalllesson.LessonInTable=##class(SPD.TimeTableLessons).%OpenId(idlessontable)
					
					set journalllesson.RoomDance=##class(SPD.TimeTableLessons).%OpenId(idlessontable).Room
					set journalllesson.Instructor=##class(SPD.TimeTableLessons).%OpenId(idlessontable).Instructor
					
					set st=journalllesson.%Save()
					
					set Group=##class(SPD.GroupDancers).%New()
					
					set Group.JournallLesson=journalllesson
					
					set st=Group.%Save()
					
					set datebeg=datebeg+7
					set dateend=dateend+7
					//
				}
			}
			elseif (TimeActualEnd<$list($listfromstring($h,","),2)){
					w "12222222222222222222222222222222222222222"
					set journalllesson=##class(SPD.JournalLesson).%New()
					w $zdt((datebeg)_","_timebeg,3),!
					w $zdt((dateend)_","_timeend,3),!
					set journalllesson.DateBegin=$zdt((datebeg)_","_timebeg,3)
					set journalllesson.DateEnd=$zdt((dateend)_","_timeend,3)
					set journalllesson.Instructor=lft.Instructor
					
					set journalllesson.School=school
					set journalllesson.LessonInTable=##class(SPD.TimeTableLessons).%OpenId(idlessontable)
					set journalllesson.RoomDance=##class(SPD.TimeTableLessons).%OpenId(idlessontable).Room
					set journalllesson.Trainer=##class(SPD.TimeTableLessons).%OpenId(idlessontable).Instructor
					set st=journalllesson.%Save()
					set Group=##class(SPD.GroupDancers).%New()
					set Group.JournallLeson=journalllesson
					set st=Group.%Save()
					
					set datebeg=datebeg+7
					set dateend=dateend+7
			}
		}
		&sql(close sPrice)
	}
	catch ex{
		set st=ex.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="UpdateJournalLesson">
<ClassMethod>1</ClassMethod>
<FormalSpec>idlessontable</FormalSpec>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		
		set lft=##class(SPD.TimeTableLessons).%OpenId(idlessontable)
		set DateActualEnd=##class(SPD.Semester).GetBeginSemester(schoolid)
		set dattme=$zdt($H,3)
		//set school=##class(Auth.Session).GetCurrentSchool()
		///todo
		set school=##class(SPD.School).%OpenId(lft.School.%Id())
		set schoolid=school.%Id()
		set idlessontype=lft.TypeLesson.%Id()
		&sql(declare JL cursor for select id into :idJournalLesson from SPD.JournalLesson where LessonInTable->id=:idlessontable and Semestr->Actual=1)
		&sql(open JL)
		for {
			&sql(fetch JL)
			quit:(SQLCODE '= 0)
			set jl=##class(SPD.JournalLesson).%OpenId(idJournalLesson)
			set datebegin=7			
		}
		&sql(close JL)
	}
	catch ex{
		set st=ex.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetJournalLessons">
<ClassMethod>1</ClassMethod>
<FormalSpec>ID</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set school=##class(SPD.School).%OpenId(ID)
		//&sql(select )
		set sqlquery="select "_
		"ID, DateBegin, DateEnd, "_
		"Instructor->id As InstructorId, "_
		"Instructor->IdDancer->FirstName As IFirstName, Instructor->IdDancer->LastName As ILastName, Instructor->IdDancer->Patronymic As IPatrnymic, "_
		"LessonInTable->id as LessonInTableId, RoomDance->id As RoomId, RoomDance->Name as RoomName, "_ 
		"LessonInTable->ShortDescription As LessonDescr, LessonInTable->TypeLesson->id As TypeLessonId, "_
		"School->id as SchoolId, School->Name As SchoolName, countDancer "_
		"FROM SPD.JournalLesson where School->id="_ID
		
		do ##class(SPD.School).GetJSONData(sqlquery)
	}
	catch ex{
		set st=ex.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="MakeTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>t1,t2,*date</FormalSpec>
<ReturnType>%Time</ReturnType>
<Implementation><![CDATA[
	set t=""
	if ((t1+t2)>86399)
	{
		set date=date+1
		set t=(t2+t1)-86399
		
	}
	ret t
]]></Implementation>
</Method>

<Method name="JSONGetLastActualPrice">
<ClassMethod>1</ClassMethod>
<FormalSpec>IDTypeLseeon</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set dt=##class(SPD.Logic.JournalLesson).GetLastActualPrice(IDTypeLseeon)
		w "{""children"":"""_dt_"""}"
	}
	catch ex{
		set st=ex.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetLastActualPrice">
<ClassMethod>1</ClassMethod>
<FormalSpec>IDTypeLesson</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		///todo
		/*
		&sql(declare price cursor for select TypeLesson->id as id,DateActualEnd,Actual into :id,:DateActualEnd,:Actual from SPD.Price order by DateActualEnd desc)
		&sql(open price)
		for {
			&sql(fetch price)
			if (id=IDTypeLseeon) && (Actual=1){
				quit
			}
			quit:(SQLCODE '= 0)
		}
		&sql(close price)*/
		
		&sql(SELECT 
		Price->DateActualEnd into :DateActualEnd
		FROM SPD.MatchPriceTypeLess
		where TypeLesson->id=:IDTypeLesson
		order by Price->DateActualEnd desc)
	ret DateActualEnd
]]></Implementation>
</Method>

<Method name="GetJournalLesson">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set sqlquery="select "_
		"ID, DateBegin, DateEnd, Instructor->id as InstructorID, "_
		"LessonInTable->id as LessonInTableId, LessonInTable->ShortDescription as ShortDescription, LessonInTable->TypeLesson->id as TypeLessonId, "_
		"RoomDance->id as RoomId, "_
		"Price->id as PriceId, Price->Cost as Cost, School->Name as SchoolName, School->id as SchoolID, countDancer "_
		"FROM SPD.JournalLesson "_
		"where id="_id
		do ##class(SPD.School).GetJSONData(sqlquery)
	}
	catch er{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set st=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
		set journalllesson=##class(SPD.JournalLesson).%OpenId(obj.ID)
		if (obj.DateBegin'="" && obj.TimeBegin'=""){
			set journalllesson.DateBegin=$zdt($zdth(obj.DateBegin_" "_obj.TimeBegin,4),3)
		}
		if (obj.TimeEnd'="")
		{
			if ($zth(obj.TimeBegin)>$zth(obj.TimeEnd))
			{
				set dateend=$zdateh(obj.DateBegin,5)+1
			}
			else 
			{
				set dateend=$zdateh(obj.DateBegin,4)
			}
			
			set journalllesson.DateEnd=$zdt(dateend_","_$zth(obj.TimeEnd),3)
		}
		
		if (obj.InstructorID'=""){
			set journalllesson.Instructor=##class(SPD.Instructor).%OpenId(obj.InstructorID)
		}
		if (obj.LessonInTableId'=""){
			set journalllesson.LessonInTable=##class(SPD.TimeTableLessons).%OpenId(obj.LessonInTableId)}
		
		if (obj.RoomId'=""){
			set journalllesson.RoomDance=##class(SPD.Room).%OpenId(obj.RoomId)	}
		set st=journalllesson.%Save()
	}
	catch err{
		set st=err.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="UpdateJournallLessons">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		
		set st=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
		
		for i=1:1:obj.Size
		{			
			set proxy=obj.Oref(i)			
			set journalllesson=##class(SPD.JournalLesson).%OpenId(proxy.ID)
			if (proxy.DateBegin'="" ){
				set journalllesson.DateBegin=$zdt($zdth(proxy.DateBegin,3),3)
			}
			w journalllesson.DateBegin,!
			if (proxy.DateEnd'="")
			{set journalllesson.DateEnd=$zdt($zdth(proxy.DateEnd,3),3)}
			
			if (proxy.InstructorID'=""){
				set journalllesson.Instructor=##class(SPD.Instructor).%OpenId(proxy.InstructorID)
			}
			if (proxy.LessonInTableId'=""){
				set journalllesson.LessonInTable=##class(SPD.TimeTableLessons).%OpenId(proxy.LessonInTableId)}
			
			if (proxy.RoomId'=""){
				set journalllesson.RoomDance=##class(SPD.Room).%OpenId(proxy.RoomId)	}
			set st=journalllesson.%Save()
		}
	}
	catch er{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&sql(select count(UserSubscription) into :count
	FROM SPD.TempGroup where 
	UserSubscription->id=:id)
	ret count
]]></Implementation>
</Method>

<Method name="CheckJL">
<ClassMethod>1</ClassMethod>
<FormalSpec>sole</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try 
	{
		&sql(select id into :id from SPD.Subscription where Sole=:sole)
		set sub=##class(SPD.Subscription).%OpenId(id)
		
	}
	catch er{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>
</Class>
</Export>
