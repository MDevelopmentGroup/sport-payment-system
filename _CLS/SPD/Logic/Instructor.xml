<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="SPD.Logic.Instructor">
<TimeCreated>63417,52320.419583</TimeCreated>

<Method name="CalcBalance">
<ClassMethod>1</ClassMethod>
<FormalSpec>Sub,TypeLesson</FormalSpec>
<ReturnType>SPD.LessonsInSubscription</ReturnType>
<Implementation><![CDATA[
	set lis=""
	
	if (Sub){
		set sublist=##class(SPD.Subscription).%OpenId(Sub).SubList.%Id()
		
		&sql(select id into :idlis from SPD.LessonsInSubscription where Subscription=:sublist and LessonType=:TypeLesson)
	
		if (idlis)
		{
			set lis=##class(SPD.LessonsInSubscription).%OpenId(idlis).%Id()
		}
	}
	ret lis
]]></Implementation>
</Method>

<Method name="Rate">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	
	ret rate
]]></Implementation>
</Method>

<Method name="GetBalance">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try
	{
		set instructorId=##class(Auth.Session).GetCurrentInstructor().%Id()
		&sql(select SchoolRate into :rate FROM SPD.TempListOfInstructorsInSchools where 
		Instructor->id=:instructorId)
		&sql(select Sum(lis->Summ)*(100-:rate)/100 into :balance
		from SPD.TableLessinSubscr where lis->Instructor->id=:instructorId)
		&sql(SELECT Sum("Transaction"->OutSum)*((100-:rate)/100) into :summ
			FROM SPD.Subscription where JournallLesson is not null and JournallLesson->LessonInTable->Instructor->id=:instructorId)
		set tb=balance+summ
		w "{""children"":"""_tb_
		"""}"
	}
	catch er
	{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetShooclBalanceByInstructor">
<ClassMethod>1</ClassMethod>
<FormalSpec>instructorId</FormalSpec>
<ReturnType>%Double</ReturnType>
<Implementation><![CDATA[
	set bl=""
	set tb=""
		&sql(select SchoolRate into :rate FROM SPD.TempListOfInstructorsInSchools where 
		Instructor->id=:instructorId)
		&sql(select Sum(lis->Summ)*(:rate)/100 into :balance
		from SPD.TableLessinSubscr where lis->Instructor->id=:instructorId)
		&sql(SELECT Sum("Transaction"->OutSum)*:rate/100 into :summ
			FROM SPD.Subscription where JournallLesson is not null and JournallLesson->LessonInTable->Instructor->id=:instructorId)
		set tb=balance+summ
		//w "tb="_tb,!
		if (tb){
			set bl=$fnumber(tb,"+",2)+0
		}
		//w "bl="_bl,!
	ret bl
]]></Implementation>
</Method>

<Method name="GetTransactions">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try
	{
		set instructor=##class(Auth.Session).GetCurrentInstructor()
		
		set sqlquery="SELECT "_
			"ID, DateEndSub, DateGEnSub, JournallLesson, QRString, School, Sole, SubList, "_
			"""Transaction""->ID, ""Transaction""->CompleteDate, ""Transaction""->DateTransactionInit, ""Transaction""->OutSum, "_
			"""Transaction""->Phone, ""Transaction""->School, ""Transaction""->Subscription, "_
			"""Transaction""->Valuta, ""Transaction""->email, ""Transaction""->sSignatureValue, ""Transaction""->success "_
			"FROM SPD.Subscription "_
			"where id in (SELECT Subscription "_
			"FROM SPD.TableLessinSubscr "_
			"where lis->Instructor=6 "_
			") or JournallLesson->LessonInTable->Instructor->id=11 "_
			"order by DateGEnSub ASC"
		do ##class(SPD.School).GetJSONData(sqlquery)
	}
	catch er
	{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetUrl">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try
	{
		d %response.SetHeader("Access-Control-Allow-Origin","*") 
		d %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS") 
		d %response.SetHeader("Access-Control-Max-Age","1000") 
		d %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization, X-Requested-With")
		
		/*set prs=%request.GetCookie("userId")
		set uh=%request.GetCookie("uh")
		&sql(select IP,Agent,RoleUser->Description into :ip,:agent,:RlUsDescr from Auth.SessionData where UserID=:prs)
		set user=##class(Auth.SessionData).%OpenId(prs)
		set hash=$SYSTEM.Encryption.AESCBCEncrypt(prs_":"_RlUsDescr,user.Key)
		set hash=##class(Auth.Session).Encode(hash)
		if ((sdAgent'=%request.GetCgiEnv("HTTP_USER_AGENT"))||(sdIP'=%request.GetCgiEnv("REMOTE_ADDR"))||
			(hash'=uh)){
			SET mygenex = ##class(%Exception.General).%New("Ошибка авторизации","999",,
                             "My own special exception")
			throw mygenex
		}*/
		//проверка авторизации
		set url=$get(%request.Data("URL",1))
		set ar=$LISTFROMSTRING(url,"/")
		set sol=$list(ar,$LISTLENGTH(ar))
		//set st=##class(SPD.Logic.Instructor).InstructorCheck(sol)
	}
	catch er
	{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="LoginA">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try
	{
		
		d %response.SetHeader("Access-Control-Allow-Origin","*")
		d %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS") 
		d %response.SetHeader("Access-Control-Max-Age","1000") 
		d %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization, X-Requested-With")
		set pass=$get(%request.Data("password",1))	set Email=$get(%request.Data("login",1))
		&sql(declare ses1 cursor for select ID, Access, Active, Email, FirstName,
		 Key, LastName, Password, Patronymic into:UserID , :Access, :Active, :Email, :FirstName, :Key, :LastName, :Password, :Patronymic
		 from LIB.Person where (Password=:pass & Email=:Email))
		 
		&sql(open ses1)
		&sql(fetch ses1)
		&sql(close ses1)
		if (%ROWCOUNT'=0)
		{
			&sql(select id, count(id) into:id,:count from Auth.SessionData where UserID=:UserID)
			if (count>0)
			{
				do ##class(Auth.SessionData).%DeleteId(id)
			}
			set session1=##class(Auth.SessionData).%New()
			set session1.IP=%request.GetCgiEnv("REMOTE_ADDR")
			set session1.Agent=%request.GetCgiEnv("HTTP_USER_AGENT")
			set session1.RoleUser=##class(LIB.Role).%OpenId(Access)
			set session1.UserID=UserID
			do session1.%Save()
			set hash=$SYSTEM.Encryption.AESCBCEncrypt(UserID_":"_session1.RoleUser.Description,Key)
			set hash=##class(Auth.Session).Encode(hash)
			&sql(select id into :idschool from SPD.School where Person->Id=:UserID)
			&sql(select id into :idInstructor from SPD.Instructor where idDancer->Id=:UserID)
			set t=+$H+1
			set t=$ZD(t,11) _", " _$ZD(t,2) _ " 00:00:00 GMT"
			set jsonCook="{"_
			"""User"":{"_
			"""success"":"""_1_
			""",""hash"":"""_hash_
			""",""userId"":"""_UserID_
			""",""idschool"":"""_idschool_
			""",""Email"":"""_Email_
			"""}}"
			do %response.SetCookie("success",1,t,"/")
			do %response.SetCookie("uh",hash,t,"/")
			do %response.SetCookie("userId",UserID,t,"/")
			do %response.SetCookie("Email",Email,t,"/")
			do %response.SetCookie("Role",session1.RoleUser.Access,t,"/")
			do %response.SetCookie("IdSchool",idschool,t,"/")
			do %response.SetCookie("IdInstructor",idInstructor,t,"/")
			w jsonCook
		}
		else{
			//SET mygenex = ##class(%Exception.General).%New("Ошибка авторизации","200",,
            	//"My own special exception")
			//throw mygenex
			w "Ошибка авторизации."
		}
	}
	catch er
	{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="CreateInstructon">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set st=$$$OK
	try
	{
		set st=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
		//стандартная проверка на дублирование
		//&sql(select count(id) into :count from SPD.Instructor where IdDancer->id=:obj.IdDancer)
		//Вызвать исключение
		set instructor=##class(SPD.Instructor).%New()
		set dancer=##class(SPD.Dancer).%OpenId(obj.IdDancer)
		set school=##class(SPD.School).%OpenId(obj.IdSchool)
		set instructor.IdDancer=dancer
		set instructor.InstructorPower=20
		set instructor.OwnerSchool=school
		set st=instructor.%Save()
		set type.ShortDescription=obj.ShortDescription
	}
	Catch exception
	{
		set st=exception
	}
	q st
]]></Implementation>
</Method>

<Method name="GetInstructorList">
<ClassMethod>1</ClassMethod>
<FormalSpec>IdSchool</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try
	{
		if (IdSchool'="undefined"){
			set sqlQuery="select Instructor->IdDancer->FirstName, Instructor->IdDancer->Image->FileName As fotoImg, "_
			"Instructor->IdDancer->Image->id as foto, SchoolRate As Rate ,Instructor->IdDancer->LastName, "_
			"Instructor->IdDancer-> Patronymic, Instructor->id "_
			"FROM SPD.TempListOfInstructorsInSchools where School="_IdSchool			
		}
		else{
			set sqlQuery="select id As ID, IdDancer->FirstName,idDancer->Image->FileName As fotoImg, "_
			"IdDancer->Image->id as foto, IdDancer->Image As foto, IdDancer->LastName, "_
			"IdDancer-> Patronymic "_
			"from SPD.Instructor"
		}
		do ##class(SPD.School).GetJSONData(sqlQuery)
	}
	Catch exception
	{
		set st=exception
	}
	q st
]]></Implementation>
</Method>

<Method name="GetTrainerInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try
	{
		set sqlQuery="select idDancer->FirstName as FirstName,idDancer->Image->FileName As fotoImg,idDancer->Image->id as foto, idDancer->LastName as LastName, "_
		"idDancer->Patronymic as Patronymic,idDancer->Phone as Phone ,idDancer->Gender from SPD.Instructor where id="_id
		do ##class(SPD.School).GetJSONData(sqlQuery)
	}
	catch ex{
		set st=ex.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetSchoolByTrainerId">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set sqlQuery="select School->id as IdSchool, School->Name as SchoolName "_
		" from SPD.TempListOfInstructorsInSchools where Instructor="_id
		do ##class(SPD.School).GetJSONData(sqlQuery)
		
	}
	catch ex{
	}
	ret st
]]></Implementation>
</Method>

<Method name="SetInstructorRate">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set idschool=##class(Auth.Session).GetCurrentSchool().%Id()
		set st=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
		set InstructorId=obj.InstructorId
		&sql(
			select id into :id
			from SPD.TempListOfInstructorsInSchools 
			where Instructor->id=:InstructorId and School->id=:idschool
		)
		set table=##class(SPD.TempListOfInstructorsInSchools).%OpenId(id)
		set table.SchoolRate=$zconvert(obj.Rate,"I","UTF8")
		set st=table.%Save()
		
	}
	catch ex{
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetInstructor">
<ClassMethod>1</ClassMethod>
<FormalSpec>ID</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set sqlquery="select School->id as IdSchool, School->Name as SchoolName, Instructor->id As InstructorId, "_
		"Instructor->idDancer->FirstName as FirstName, Instructor->idDancer->LastName as LastName, "_
		"Instructor->idDancer->Patronymic as Patronymic, Instructor->idDancer->Gender, SchoolRate As Rate"_
		" from SPD.TempListOfInstructorsInSchools where Instructor="_ID_
		" and School->id="_##class(Auth.Session).GetCurrentSchool().%Id()
		
		do ##class(SPD.School).GetJSONData(sqlquery)		
	}
	catch ex{
	}
	ret st
]]></Implementation>
</Method>

<Method name="InstructorCheck">
<ClassMethod>1</ClassMethod>
<FormalSpec>sol</FormalSpec>
<Implementation><![CDATA[
	set st=$$$OK
	try{
	set instructor=##class(Auth.Session).GetCurrentInstructor()
	set idcjl=##class(SPD.Instructor).GetCurrentJL(instructor)
	set cjl=##class(SPD.JournalLesson).%OpenId(idcjl)
	&sql(select id into :idsb from SPD.Subscription where Sole=:sol)
	set sub=##class(SPD.Subscription).%OpenId(idsb)
	set nowdate=$h
	if (nowdate>sub.DateEndSub){
		//абонемент просрочен в html5 уведомления
	}
	else {
		set tl=cjl.LessonInTable.TypeLesson.%Id()
		&sql(select numb into :numbl from SPD.TableLessinSubscr where Subscription=:idsub and TypeLesson=:tl)
		if (numb=0){
			//закончились занятия в html5 уведомления	
		}
		else{
			//SPD.Logic.TempGroup.Create(jlid, subid)
			set st=##class(SPD.TempGroup).Create(cjl.%Id(), sub.%Id())
		}
	}
	}
	catch ex{
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetCurrentJL">
<Description>
чекалка для инструктора
получить текущий JL</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>idinstr</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set nowdate=$zdt($h,3)
	w nowdate
	&sql(select id into :idjl
		from SPD.JournalLesson 
		where Instructor->id=:idinstr and DateBegin<:nowdate and DateEnd>:nowdate
	)
	ret idjl
]]></Implementation>
</Method>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		set st=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
		set instructor=##class(Auth.Session).GetCurrentInstructor()
		
		
		set instructor.IdDancer.FirstName=$zconvert(obj.FirstName,"I","UTF8")
		
		set instructor.IdDancer.Gender=obj.Gender
		
		set instructor.IdDancer.Image=##class(LIB.FileBase).%OpenId(obj.foto)
		set instructor.IdDancer.LastName=$zconvert(obj.LastName,"I","UTF8")
		if (obj.password'=""){
			set instructor.IdDancer.Password=obj.password
		}
		set instructor.IdDancer.Patronymic=$zconvert(obj.Patronymic,"I","UTF8")
		set instructor.IdDancer.Phone=..GetPhone(obj.Phone)
		set st=instructor.IdDancer.%Save()
		set st=instructor.%Save()
		
	}
	catch ex{
		set st=ex.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="GetPhone">
<ClassMethod>1</ClassMethod>
<FormalSpec>str</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set str=$replace(str,"(","")
	set str=$replace(str,")","")
	set str=$replace(str," ","")
	set str=$replace(str,"-","")
	ret str
]]></Implementation>
</Method>
</Class>
</Export>
