<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Auth.DispatchRequest">
<Abstract>1</Abstract>
<Super>%CSP.REST,%Populate,%XML.Adaptor,%ZEN.DataModel.Adaptor</Super>
<TimeCreated>63292,65305.627486</TimeCreated>
<Inheritance>right</Inheritance>

<Method name="DispatchRequest">
<Description>
Dispatch a REST request according to URL and Method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher

    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    Try {
	    set userid=%request.GetCookie("userId")
		set uh=%request.GetCookie("uh")
		set user=##class(LIB.Person).%OpenId(userid)
		&sql(select id,RoleUser->Description,Agent,IP 
		into :sessionid,:sdRoleUserDescription,:sdAgent,:sdIP
		 from Auth.SessionData where UserID=:userid)
		set sd=##class(Auth.SessionData).%OpenId(sessionid)
		set hash=$SYSTEM.Encryption.AESCBCEncrypt(userid_":"_sdRoleUserDescription,user.Key)
		set hash=##class(Auth.Session).Encode(hash)
		
		if ((sdAgent'=%request.GetCgiEnv("HTTP_USER_AGENT"))||(sdIP'=%request.GetCgiEnv("REMOTE_ADDR"))||
			(hash'=uh)){
			do %response.SetCookie("success",0,1,"/")
			do %response.SetCookie("uh","",1,"/")
			do %response.SetCookie("userId","",1,"/")
			do %response.SetCookie("Email","",1,"/")
			do %response.SetCookie("Role","",1,"/")
			do %response.SetCookie("IdSchool","",1,"/")
			do %response.SetCookie("IdInstructor","",1,"/")
		}
	    
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0

            #; Set the Http Status
            Set %response.Status="401 Unauthorized"

            #; Write out the header
            Do %response.WriteHTTPHeader()

            #; Done
            Quit
        }

        Set (tResourceMatched,tMethodMatched)=0

        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {

            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit

            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)

            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)

            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)

            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method
            If tMatcher.Match(tMatchUrl) {

                #; We have matched the resource
                Set tResourceMatched=1

                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue

                Set tTarget=$List(tMapEntry,3)

                #; We have matched a method
                Set tMethodMatched=1

                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }

                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)

                #; Dispatch
                Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                If $$$ISERR(tSC) Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))

                #; Don't want multiple matches
                Quit
            }
        }

        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit

        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit

    } Catch (e) {

        #; Issue a '500'
        Do ..Http500(e)
    }

    If ..#UseSession=0 Set %session.EndSession=1

    Quit tSC
]]></Implementation>
</Method>

<Method name="Session">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<DataLocation>^Auth.DispatchRequestD</DataLocation>
<DefaultData>DispatchRequestDefaultData</DefaultData>
<IdLocation>^Auth.DispatchRequestD</IdLocation>
<IndexLocation>^Auth.DispatchRequestI</IndexLocation>
<StreamLocation>^Auth.DispatchRequestS</StreamLocation>
<Data name="DispatchRequestDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
