<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="REST.JSON">
<TimeCreated>63313,43933.858721</TimeCreated>

<Method name="Settings">
<Description>
метод для получения данных при успешном проведении платежа(чек)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>idschool,url</FormalSpec>
<Implementation><![CDATA[
	
	set ^Settings(""_idschool_"","url")="mdg777.zapto.org"
]]></Implementation>
</Method>

<Method name="SuccessURL">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
 	try {
		$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
		set transact=##class(SPD.Transactions).%New()
		set transact.OutSum=obj.OutSum
		set transact.InVid=obj.InVid
		set transact.sSignatureValue=obj.sSignatureValue
		set transact.UserId=##class(SPD.SPDUser).%OpenId(obj.UserId)
		set transact.Valuta=obj.Valuta
		do transact.%Save()
 	}
 	catch ex {
  	set st=ex.AsStatus()
 	}
 	ret st
]]></Implementation>
</Method>

<Method name="GetPayments">
<Description>
получить все транзакции(пользователь или админ сможет просмотреть историю платежей)
как послать пользователя выкравшего куку другого пользователя? допилить</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>HASH</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sql="select ID, DateTransaction, InVid, OutSum, UserId, Valuta, sSignatureValue"_
	" from SPD.Transactions where UserId="_UserID
	do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql)
	ret $$$OK
]]></Implementation>
</Method>

<Method name="SetRobokassaSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>MrchLogin,sIncCurrLabel,sCulture,desc,mrjpass,mrjpass2,idschool</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
	//set MrchLogin="23g561sqw67uthg45"
	//set sIncCurrLabel="W1R"
	//set sCulture="ru"
	//set desc="Dances"
	//set mrjpass="adsfer920rne45"
	//set mrjpass2="95093wqn4b23h6"
	set ^Robokassa(""_idschool_"","MrchLogin")=MrchLogin
	set ^Robokassa(""_idschool_"","sIncCurrLabel")=sIncCurrLabel
	set ^Robokassa(""_idschool_"","sCulture")=sCulture
	set ^Robokassa(""_idschool_"","desc")=desc
	set ^Robokassa(""_idschool_"","mrjpass")=mrjpass
	set ^Robokassa(""_idschool_"","mrjpass2")=mrjpass2
	}
	catch er{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="SetDefSettings">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(REST.JSON).SetRobokassaSettings("23g561sqw67uthg45","W1R","ru","Dances","adsfer920rne45","95093wqn4b23h6","55")
]]></Implementation>
</Method>

<Method name="GetRobokassaSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>idschool</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set str="{""children"":["_
			"{""MrchLogin"":"""_$GET(^Robokassa(idschool,"MrchLogin"),"")_""","_
			  """sIncCurrLabel"":"""_$GET(^Robokassa(idschool,"sIncCurrLabel"),"")_""","_			  
			  """sCulture"":"""_$GET(^Robokassa(idschool,"sCulture"),"")_""","_
			  """desc"":"""_$GET(^Robokassa(idschool,"desc"),"")_""","_
			  """mrjpass"":"""_$GET(^Robokassa(idschool,"mrjpass"),"")_""","_
			  """mrjpass2"":"""_$GET(^Robokassa(idschool,"mrjpass2"),"")_"""}"_
			  "]}"
	ret str
]]></Implementation>
</Method>

<Method name="BuyJL">
<Description>
инициализация оплаты</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try{
		$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
		set jl=##class(SPD.JournalLesson).%OpenId(obj.idJL)
		set sub=0
		set MrchLogin=$GET(^Robokassa(idschool,"MrchLogin"),"")
		set sIncCurrLabel=$GET(^Robokassa(idschool,"sIncCurrLabel"),"")
		set sCulture=$GET(^Robokassa(idschool,"sCulture"),"")
		set desc=$GET(^Robokassa(idschool,"desc"),"")
		set mrjpass=$GET(^Robokassa(idschool,"mrjpass"),"")
		set mrjpass2=$GET(^Robokassa(idschool,"mrjpass2"),"")
		set sm=jl.Semestr
		set lt=jl.LessonInTable.TypeLesson
		&sql(select cost into :cost from SPD.Price where Semester=:sm and LessonType=:lt)
		set outSum=cost
		set sole=##class(SPD.Logic.Subscription).GenerateSole(sub.cost_""_sub.School_""_sub.ShortDescription)
		set SignatureValue=##class(%SYSTEM.Encryption).MD5Hash(""_MrchLogin_":"_outSum_":"_transaction.%Id()_":"_mrjpass_":shpjls="_jls_":shpsub=0")
		//set SignatureValue=##class(%SYSTEM.Encryption).MD5Hash(""_MrchLogin_":"_outSum_":"_transaction.%Id()_":"_mrjpass)
		set sole=##class(Auth.Session).Encode(sole)
		set hex=##class(Auth.Session).Encode(SignatureValue)
		set transaction.sSignatureValue=$ZCONVERT(hex,"I","UTF8")
		set transaction.School=jl.LessonInTable.School
		do transaction.%Save()
		set url="http://test.robokassa.ru/Index.aspx?MrchLogin="_MrchLogin_
	    "&OutSum="_outSum_
	    "&InvId="_transaction.%Id()_
	    "&Desc="_desc_
	    "&SignatureValue="_hex_
	    "&sIncCurrLabel="_sIncCurrLabel_
	    "&sCulture="_sCulture_
	    "&shpjls="_jls_
	    "&shpsub=0"
	    
    	w "{""urlPay"":"""_url_"""}"
	}
	catch er{
		set st=er.AsStatus()
	}
	ret st
]]></Implementation>
</Method>

<Method name="InitPayment">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
 	try {
	$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
	
	///test parameters
	set idschool=55
	set MrchLogin=$GET(^Robokassa(idschool,"MrchLogin"),"")
	set sIncCurrLabel=$GET(^Robokassa(idschool,"sIncCurrLabel"),"")
	set sCulture=$GET(^Robokassa(idschool,"sCulture"),"")
	set desc=$GET(^Robokassa(idschool,"desc"),"")
	set mrjpass=$GET(^Robokassa(idschool,"mrjpass"),"")
	set mrjpass2=$GET(^Robokassa(idschool,"mrjpass2"),"")
	set transaction=##class(SPD.Transactions).%New()
	if (obj.idJL=""){
		set sub=##class(SPD.SubscriptionList).%OpenId(obj.idSL)
		set subID=sub.%Id()
		set transaction.Subscription=sub
		set transaction.School=sub.School
		set outSum=sub.cost
		set transaction.OutSum=##class(REST.JSON).SetSum(outSum)
		set jls=0
	}
	else {
		set jlso=##class(SPD.JournalLesson).%OpenId(obj.idJL)
		
		set subID=0
		set jls=jlso.%Id()
		set transaction.School=jlso.LessonInTable.School
		set sm=jlso.Semestr.%Id()
		set lt=jlso.LessonInTable.TypeLesson.%Id()
		&sql(select cost into :cost from SPD.Price where Semester=:sm and LessonType=:lt)
		set outSum=cost
		set transaction.OutSum=##class(REST.JSON).SetSum(outSum)
		
 	}
	do transaction.%Save()
	if (obj.email'="")
	{
		set transaction.email=obj.email
	}
	set sole=##class(SPD.Logic.Subscription).GenerateSole(outSum_""_transaction.School)
	set SignatureValue=##class(%SYSTEM.Encryption).MD5Hash(""_MrchLogin_":"_outSum_":"_transaction.%Id()_":"_mrjpass_":shpjls="_jls_":shpsub="_subID)
	set sole=##class(Auth.Session).Encode(sole)
	set hex=##class(Auth.Session).Encode(SignatureValue)
	set transaction.sSignatureValue=$ZCONVERT(hex,"I","UTF8")
	do transaction.%Save()
	set url="http://test.robokassa.ru/Index.aspx?MrchLogin="_MrchLogin_
    "&OutSum="_outSum_
    "&InvId="_transaction.%Id()_
    "&Desc="_desc_
    "&SignatureValue="_hex_
    "&sIncCurrLabel="_sIncCurrLabel_
    "&sCulture="_sCulture_
    "&shpjls="_jls_
    "&shpsub="_subID
    
    w "{""urlPay"":"""_url_"""}"
 	}
    catch ex {
  		set st=ex.AsStatus()
 	}
	ret st
]]></Implementation>
</Method>

<Method name="SuccessPayment">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	// есть юзер id и SignatureValue
]]></Implementation>
</Method>

<Method name="SetSum">
<ClassMethod>1</ClassMethod>
<FormalSpec>sum</FormalSpec>
<Implementation><![CDATA[
	set arr=$listfromstring(sum,".")
	
	if ($LISTLENGTH(arr)'=2){		
		set sum=sum_".00"
	}
	elseif ($LISTLENGTH(arr)=2)
	{
		if (($LENGTH($list(arr,2))=1))
		{
			set sum=sum_"0"
		}
		elseif(($LENGTH($list(arr,2))=0))
		{
			set sum=sum_"00"
		}
	}
	if (($LENGTH($list(arr,1))=0))
	{
		set sum="0"_sum
	}
	ret sum
]]></Implementation>
</Method>

<Method name="XMLParse">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	/*
	#dim resp As %String=""
	set objhr=##class(%Net.HttpRequest).%New()
	set objhr.Server="test.robokassa.ru"
	set objhr.Location="91.247.68.36:8090"
	set objhr.Https=1
	set objhr.Port=443
	set objhr.Timeout=1
	set objhr.SSLConfiguration="robokassa"
	//do objhr.Get("/Webservice/Service.asmx/GetCurrencies?MerchantLogin=testRobokassaTest&Language=ru")
	do objhr.Get("/ru/Doc/Ru/Interface.aspx")
	set resp=objhr.HttpResponse.Data.Read()
	w resp
	
	s sc = ##class(%XML.TextReader).ParseString($ZCONVERT(resp,"O","UTF8"),.reader)
	while(reader.Read()){
		w !,"Nodetype="_reader.NodeType_"---- Name="_reader.Name_"----- Value=",!
		w "Attributs={"
		for i=1:1:reader.AttributeCountGet(){
			do reader.MoveToAttributeIndex(i)
			set a=reader.Value //,"I","UTF8")
		zw a
		}
		w "}",!
	}
	q $$$OK
	*/
]]></Implementation>
</Method>

<Method name="GetToken">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ghr=##class(%Net.HttpRequest).%New()
	set ghr.Server="www.googleapis.com"
	set ghr.Https=1
	set ghr.SSLConfiguration="GoogleApi"
	set ghr.Location="mdg777.zapto.org"
	set ghr.Port=80
	set ghr.Timeout=2
]]></Implementation>
</Method>

<Method name="RobokassaSuccess">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try {
			
	set MrchLogin="23g561sqw67uthg45"
	//set outSum="400.00"
	set sIncCurrLabel="W1R"
	set sCulture="ru"
	set InvId="1"
	set desc="Dances"
	set mrjpass="adsfer920rne45"
	
		set OutSum=$Get(%request.Data("OutSum",1))
		set InvId=$Get(%request.Data("InvId",1))
		set Culture=$Get(%request.Data("Culture",1))		
		set SignValue=$Get(%request.Data("SignatureValue",1))
		set transactionId=$Get(%request.Data("shpId",1))
		set UserId=$Get(%request.Data("shpUserId",1))
		set transaction=##class(SPD.Transactions).%OpenId(transactionId)
		&sql(select id,sSignatureValue,count(id) into :id,:sSignatureValue ,:count from SPD.Transactions where id=:transactionId)
		w "sSignatureValue="_sSignatureValue,!
		
		set SignatureValue=##class(%SYSTEM.Encryption).MD5Hash(""_MrchLogin_":"_OutSum_":"_InvId_":"_mrjpass_":shpId="_transactionId_":shpUserId="_UserId)
		
		w "SignValue="_$ZCVT(SignValue,"l"),!
		set design=##class(Auth.Session).Encode(SignatureValue)
		w "design="_design,!
		if (count=1){
			
			set transaction.CompleteDate=$H
			set transaction.success=1
		}		
	} catch ex {
		set st=ex.AsStatus()
	}
	quit st
]]></Implementation>
</Method>

<Method name="RobokassaResult">
<Description>
Обработка результата</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set mrjpass="adsfer920rne45"
	//try {
	set OutSum=$Get(%request.Data("OutSum",1))
	set InvId=$Get(%request.Data("InvId",1))
	set SignValue=$Get(%request.Data("SignatureValue",1))
	set jls=$Get(%request.Data("shpjls",1))
	set sub=$Get(%request.Data("shpsub",1))
	//set UserId=$Get(%request.Data("shpUserId",1))
	set transaction=##class(SPD.Transactions).%OpenId(InvId)
	set idschool=transaction.School.%Id()
	set url=$GET(^Settings(""_idschool_"","url"),"")
	set mrjpass2=$GET(^Robokassa(idschool,"mrjpass2"),"")
	set SignatureValue=##class(%SYSTEM.Encryption).MD5Hash(""_transaction.OutSum_":"_transaction.%Id()_":"_mrjpass2_":shpjls="_jls_":shpsub="_sub)
	set SignatureValue=##class(Auth.Session).Encode(SignatureValue)
	s cost=""
	if (SignatureValue=$ZCVT(SignValue,"l"))
	{		
		
		set transaction.success=1
		set transaction.CompleteDate=$ZDT($H,3)
		set subd=##class(SPD.Subscription).%New()
		//проверить статус кода для данной операции
		if (jls=0){
			set sub=##class(SPD.SubscriptionList).%OpenId(sub)
			 
			///сгенерировать абонемент
			set subd.DateGEnSub=$zdt($h,3)
			set subd.DateEndSub=$zdt(##class(REST.JSON).SumDT($h,sub.Duration),3)
			set subd.School=transaction.School
			set subd.SubList=sub
			s cost=sub.cost s sd=sub.ShortDescription			
			set subd.Transaction=transaction
			set subd.Sole=##class(Auth.Session).Encode(##class(SPD.Logic.Subscription).GenerateSole(cost_""_idschool_""_InvId))
			set subd.QRString="http://"_url_"/dances/index.html#/Subscription/"_subd.Sole
			set st=subd.%Save()
			set st=##class(SPD.TableLessinSubscr).CreateTLISFromSL(subd.%Id())
		}
		else
		{
			set jlso=##class(SPD.JournalLesson).%OpenId(jls)
			set subd.DateGEnSub=jlso.DateBegin
			set subd.DateEndSub=jlso.DateEnd
			set subd.School=transaction.School
			set sm=jlso.Semestr.%Id()
			set lt=jlso.LessonInTable.TypeLesson.%Id()
			&sql(select cost into :jlcost from SPD.Price where Semester=:sm and LessonType=:lt)
			
			set subd.Transaction=transaction
			s cost=jlcost s sd=jlso.LessonInTable.ShortDescription
			set subd.Sole=##class(Auth.Session).Encode(##class(SPD.Logic.Subscription).GenerateSole(cost_""_idschool_""_InvId))
			set subd.QRString="http://"_url_"/dances/index.html#/Subscription/"_subd.Sole
			set subd.JournallLesson=jlso
			set st=subd.%Save()
			s st=##class(SPD.TableLessinSubscr).CreateTLISFORJL(jls,subd.%Id())
			
		}
		set st=##class(WEB.Util.Mail).NewMail(transaction.email,"SendQRCode",,subd.Sole)
		set st=transaction.%Save()
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="RobokassaFailUrl">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	try {   
		w 1
		set OutSum=$Get(%request.Data("OutSum",1))
		set transactionId=$Get(%request.Data("InvId",1))
		set Culture=$Get(%request.Data("Culture",1))		
		set transaction=##class(SPD.Transactions).%OpenId(transactionId)
			set transaction.CompleteDate=$zdt($h,3)
			set transaction.success=0
			set st=transaction.%Save()
	} catch ex {
		set st=ex.AsStatus()
	}
	quit st
]]></Implementation>
</Method>

<Method name="SumDT">
<ClassMethod>1</ClassMethod>
<FormalSpec>dt,s</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set str=""
		set arrdt=$LISTFROMSTRING(dt,",")
		set t=$list(arrdt,2)
		set dt=dt+s
		set str=dt_","_t
	ret str
]]></Implementation>
</Method>

<Method name="XMLResultUrl">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set MrchLogin="23g561sqw67uthg45"
	set mrjpass2="95093wqn4b23h6"
	set InvId="1"
		
	set st=$$$OK
	set objhr=##class(%Net.HttpRequest).%New()
	set Signature=##class(%SYSTEM.Encryption).MD5Hash(MrchLogin_":"_InvId_":"_mrjpass2)
	set Signature=##class(Auth.Session).Encode(Signature)
	set objhr.Server="test.robokassa.ru"
	set objhr.Location="91.247.68.36:8090"	
	set str="/Webservice/Service.asmx/OpState?MerchantLogin="_MrchLogin_"&InvoiceID="_InvId_"&Signature="_Signature_"&StateCode="_100
	do objhr.Get(str)
	set resp=objhr.HttpResponse.Data.Read()
	set objhr.Timeout=1
	//qr код + создание абонемента
	//w resp
	//&sql(select sSignatureValue into :Signature from SPD.Transactions where UserId=:userId)
	//w !,hex
	
	//$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
	

		
		
	//}
	 //catch ex {
		//set st=ex.AsStatus()
	//}
	ret st
]]></Implementation>
</Method>

<Method name="FLUSHSCHOOL">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
</Method>

<Method name="FLUSHALL">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ##class(SPD.SPD.GroupDancers).%DeleteExtent()
	do ##class(SPD.JournalLesson).%DeleteExtent()
	do ##class(SPD.TimeTableLessons).%DeleteExtent()
	do ##class(SPD.TypeLesson).%DeleteExtent()
	do ##class(SPD.SubscriptionList).%DeleteExtent()
	do ##class(SPD.Subscription).%DeleteExtent()
]]></Implementation>
</Method>

<Method name="sendResRob">
<Description>
для тнеста. удалить.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set stt=""
	try 
	{
		
		
		
	}
	catch er
	{
		
	}
	ret str
]]></Implementation>
</Method>
</Class>
</Export>
